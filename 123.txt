**Документация для Postman из проекта "bank"**

В данном проекте реализован RESTful API для банковского приложения. Ниже приведены основные эндпоинты, которые можно использовать в Postman для тестирования.

### **1. Аутентификация и регистрация**

- **Регистрация пользователя**
  - **Метод:** POST
  - **URL:** `/api/auth/register`
  - **Тело запроса:**
    ```json
    {
      "username": "имя_пользователя",
      "password": "пароль",
      "role": "ROLE_USER" // (опционально)
    }
    ```

- **Вход в систему**
  - **Метод:** POST
  - **URL:** `/api/auth/login`
  - **Тело запроса:**
    ```json
    {
      "username": "имя_пользователя",
      "password": "пароль"
    }
    ```

### **2. Управление пользователями (только для администраторов)**

- **Получение всех пользователей**
  - **Метод:** GET
  - **URL:** `/api/admin/users`
  - **Заголовки:** 
    - `Authorization: Bearer <токен>`

- **Получение пользователя по ID**
  - **Метод:** GET
  - **URL:** `/api/admin/user/{id}`
  - **Заголовки:** 
    - `Authorization: Bearer <токен>`

- **Создание нового пользователя**
  - **Метод:** POST
  - **URL:** `/api/admin/user`
  - **Тело запроса:**
    ```json
    {
      "username": "имя_пользователя",
      "password": "пароль",
      "role": "ROLE_USER" // (опционально)
    }
    ```
  - **Заголовки:** 
    - `Authorization: Bearer <токен>`

- **Обновление пользователя**
  - **Метод:** PUT
  - **URL:** `/api/admin/user/{id}`
  - **Тело запроса:**
    ```json
    {
      "username": "новое_имя_пользователя",
      "password": "новый_пароль" // (опционально)
    }
    ```
  - **Заголовки:** 
    - `Authorization: Bearer <токен>`

- **Удаление пользователя**
  - **Метод:** DELETE
  - **URL:** `/api/admin/user/{id}`
  - **Заголовки:** 
    - `Authorization: Bearer <токен>`

### **3. Управление аккаунтами**

- **Перевод средств**
  - **Метод:** POST
  - **URL:** `/api/account/transfer`
  - **Тело запроса:**
    ```json
    {
      "toAccountId": 1,
      "amount": 100.0
    }
    ```
  - **Заголовки:** 
    - `Authorization: Bearer <токен>`

- **Получение баланса текущего аккаунта**
  - **Метод:** GET
  - **URL:** `/api/account/me`
  - **Заголовки:** 
    - `Authorization: Bearer <токен>`

### **4. Управление транзакциями**

- **Получение моих транзакций**
  - **Метод:** GET
  - **URL:** `/api/transactions/my`
  - **Заголовки:** 
    - `Authorization: Bearer <токен>`

### **5. Управление ролями (только для администраторов)**

- **Создание роли**
  - **Метод:** POST
  - **URL:** `/api/admin/roles`
  - **Тело запроса:**
    ```json
    "ROLE_NEW"
    ```
  - **Заголовки:** 
    - `Authorization: Bearer <токен>`

- **Получение всех ролей**
  - **Метод:** GET
  - **URL:** `/api/admin/roles`
  - **Заголовки:** 
    - `Authorization: Bearer <токен>`

- **Обновление роли**
  - **Метод:** PUT
  - **URL:** `/api/admin/roles/{id}`
  - **Тело запроса:**
    ```json
    "ROLE_UPDATED"
    ```
  - **Заголовки:** 
    - `Authorization: Bearer <токен>`

- **Удаление роли**
  - **Метод:** DELETE
  - **URL:** `/api/admin/roles/{name}`
  - **Заголовки:** 
    - `Authorization: Bearer <токен>`

### **6. VIP пользователи**

- **Получение данных текущего VIP пользователя**
  - **Метод:** GET
  - **URL:** `/api/vip/me`
  - **Заголовки:** 
    - `Authorization: Bearer <токен>`

- **Обновление данных VIP пользователя**
  - **Метод:** PUT
  - **URL:** `/api/vip/me`
  - **Тело запроса:**
    ```json
    {
      "username": "новое_имя_пользователя",
      "password": "новый_пароль" // (опционально)
    }
    ```
  - **Заголовки:** 
    - `Authorization: Bearer <токен>`

- **Получение списка других VIP пользователей**
  - **Метод:** GET
  - **URL:** `/api/vip/other-vips`
  - **Заголовки:** 
    - `Authorization: Bearer <токен>`

### **Заключение**
Эти эндпоинты можно использовать в Postman для тестирования функциональности API банковского приложения. Не забудьте заменить `<токен>` на действительный JWT-токен, полученный после входа в систему.